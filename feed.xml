<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Srijan R. Shetty</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="//srijanshetty.in/feed.xml" />
<link rel="alternate" type="text/html" href="//srijanshetty.in" />
<updated>2019-10-22T13:19:59+05:30</updated>
<id>//srijanshetty.in/</id>
<author>
  <name>Srijan R. Shetty</name>
  <uri>//srijanshetty.in/</uri>
  <email>srijan.shetty+code@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Gitting Hooks setups]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/gitting-hooks-setup/" />
  <id>//srijanshetty.in/gitting-hooks-setup</id>
  <published>2019-10-06T23:31:27+05:30</published>
  <updated>2019-10-06T23:31:27+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve always loved the concept of &lt;code&gt;git hooks&lt;/code&gt;, but it’s setup has always troubled me as being &lt;code&gt;snowflaky&lt;/code&gt;.
Sharing hooks across a development team was awkward and there was no &lt;a href=&quot;https://www.martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;Ubiquitous
Language&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;
After struggling with bespoke solutions in the lingua franca of bash,
I rolled my own solutions which has been lost (fortunately) to Father Time.
My Eureka moment happened last week when I came across &lt;a href=&quot;https://commitlint.js.org/#/guides-local-setup&quot;&gt;commitlint&lt;/a&gt;
and the &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt; spec 
(an admirable way to manage releases and make commits more readable).
In trying to integrate Conventional Commits to my &lt;a href=&quot;https://github.com/srijanshetty/minimal-mistakes&quot;&gt;website&lt;/a&gt;, 
I’ve come across a solution that works perfect for me.&lt;br /&gt;&lt;br /&gt;
The current setup uses &lt;code&gt;husky&lt;/code&gt; as a dev-dependency in &lt;code&gt;package.json&lt;/code&gt; which sets up a &lt;code&gt;commit-msg&lt;/code&gt; hook as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install --save-dev husky&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;other parameters&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;commitlint&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@commitlint/config-conventional&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;quot;type-enum&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;always&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;feat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;docs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;refactor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;revert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;husky&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;hooks&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;quot;commit-msg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;commitlint -E HUSKY_GIT_PARAMS&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The great part of this setup is that it ties everything into a single &lt;code&gt;package.json&lt;/code&gt; file. 
The npm eco-system is a cesspool when it comes to security but it does make developer tooling a breeze.
The community converging on using a single &lt;code&gt;package.json&lt;/code&gt; is a god-send, over the alternative of a bunch of .rc files spewed all across; adding &lt;code&gt;git hooks&lt;/code&gt; is the natural evolution to the puzzle.&lt;br /&gt;&lt;br /&gt;
It’s great how sometimes your problems solve themselves if you let them be for years.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/gitting-hooks-setup/&quot;&gt;Gitting Hooks setups&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on October 06, 2019.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[JCIP - Java Concurrency in Practice 2019 Review]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review/" />
  <id>//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review</id>
  <published>2019-08-18T17:50:38+05:30</published>
  <updated>2019-08-18T17:50:38+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As of writing, &lt;code&gt;Java 13&lt;/code&gt; has a release candidate and JCIP still refers to &lt;code&gt;Java 6&lt;/code&gt; as the latest and greatest of Java. It’s no wonder that Java forums are replete with questions on the relevance of JCIP - full disclosure, I posed the same question when I emailed Heinz Kabutz. After spending 6 months with the books (you read that right, and this wasn’t the only book I was reading), I’ve realized how wrong my Java programs have been. &lt;br /&gt;&lt;br /&gt;
In the age of fast paced evolution of programming languages, most programming language books age badly. JCIP is not in that ilk, the fundamental point of contention in JCIP is writing highly scalable and correct concurrent code and not Java. JCIP excels in imparting a fundamental understanding of concurrency, and dissecting core issues a developer might face when architecting concurrent programs.&lt;br /&gt;&lt;br /&gt;
Caveat emptor. It’s a dense read, ideas are succinct and compact and rarely prolix. Which makes it easy to read and hard to grasp. There have been times wherein I’ve spent hours understanding the implication of concepts such as &lt;code&gt;Initialization safety&lt;/code&gt;, &lt;code&gt;safe publication&lt;/code&gt;, &lt;code&gt;happens-before relationships&lt;/code&gt;; these concepts have inexorably changed my mental model of concurrent programming for the better.&lt;br /&gt;&lt;br /&gt;
I would definitely urge serious Java programmers to try and work through JCIP, and maybe have an epiphany of their own.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review/&quot;&gt;JCIP - Java Concurrency in Practice 2019 Review&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 18, 2019.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[John Vim - Parabellum]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/john-vim-parabellum/" />
  <id>//srijanshetty.in/technical/john-vim-parabellum</id>
  <published>2019-06-28T09:21:32+05:30</published>
  <updated>2019-06-28T09:21:32+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I would be digressing but the parallels between John Wick and Vim are too many.
Both of them are fine craftsmen of their meteir, surgical and deliberate at every
step, at their prime all their actions are well thought of and are operatic. It’s
not what they do, but how they accomplish their raison d’etre that makes them what
they are today.&lt;br /&gt;&lt;br /&gt;
Vim8 was a big bang release unleashing a wealth of goodies to all us vim enthusiasts.
But trying the latest vim out was challenging, because I was circumscribe by my choice
of linux distribution. A PPA is definitely a way out of my quagmire, but I prefer not to
use a random PPA for the lack of trust. Vim8 was a dream that I forgot about until my
laptop crashed and I bought an OTC Ubuntu 18.04 laptop.&lt;br /&gt;&lt;br /&gt;
8.1 is a minor release but I couldn’t wait another laptop cycle to get my hands on. So,
I decided to chose the &lt;a href=&quot;https://en.wikipedia.org/wiki/Red_pill_and_blue_pill&quot;&gt;red pill&lt;/a&gt;
and compile vim from source.&lt;br /&gt;&lt;br /&gt;
Theoretically compiling vim from source should be simple:&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/vim &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vim
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But the devil is in the details. Here’s the exact steps that one needs to follow:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/vim &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vim
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--with-features&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;huge &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-multibyte &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-rubyinterp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-python3interp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--with-python3-config-dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-perlinterp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-luainterp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-gui&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gtk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--enable-cscope &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_bin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some salient points in this setup are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I tried using pyenv’s path for python3-config-dir, it does not work.&lt;/li&gt;
  &lt;li&gt;Python 2 and 3 cannot interop in ubuntu as explained
&lt;a href=&quot;https://stackoverflow.com/questions/23023783/vim-compiled-with-python-support-but-cant-see-sys-version&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this helps a forlorn developer searching for the oasis.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/john-vim-parabellum/&quot;&gt;John Vim - Parabellum&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on June 28, 2019.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Modern Love]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/prose/modern-love/" />
  <id>//srijanshetty.in/prose/modern-love</id>
  <published>2018-08-26T17:50:51+05:30</published>
  <updated>2018-08-26T17:50:51+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;The problem has always been that we’re presented with such a romanticized version of love stories. The brooding byronic hero’s love is an inescapable force and the damsel/strong women gravitates towards it. It’s a singular love, it’s either make it or break it, their communion was destined and they’re unbreakable; but is it true? Does modern love really resemble what’s been foretold for centuries, and if we’re being honest here, I would like to ask if any love is of this kind?&lt;br /&gt;&lt;br /&gt;
On the other hand we have the archetypal bad boy, who wins over woman with his enigma or emotional unavailability; another stereotype which manifests in possessive other halves who don’t let the other breathe. Love was never meant to be suffocating - well, not always - it’s interesting that we stand at destiny’s crossroads today, trying to decipher what love is, and more importantly what it should be, for after all it’s the gestalt of the cultural zeitgeist.&lt;br /&gt;&lt;br /&gt;
I would define love as a little more than friendship, it has the emotional availability of friendship; the zing that it brings along. It’s a little more than friendship considering there’s that physical connect which might or might not be in a friendship. Love and friendship are very much alike, to the extend that I would make the apposite claim that I love all my best friends. (This might invoke the collective groan of a lot of readers who either haven’t loved or who fail to see love to be anything beyond the physical realm).&lt;br /&gt;&lt;br /&gt;
Love is a synergistic bond, you let each other grow, you let each other fail, you scuffle, you make up, you stay put for each other - like friends do. In fact, friendship is not an exclusive relationship, you can be really close with a few different people; modern times juxtapose love to friendship by invoking the exclusivity clause - which is not fine by me, for it abases love to be merely physical. Love is more than that, love demands no sacrifice, you need not give up your friendships to taste the forbidden fruit.&lt;br /&gt;&lt;br /&gt;
Modern love is strange, and hopefully we come to see of it more like friendship; and less contractual&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/prose/modern-love/&quot;&gt;Modern Love&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 26, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to Train Your Python - 2.7]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/how-to-train-your-python-2-7/" />
  <id>//srijanshetty.in/technical/how-to-train-your-python-2-7</id>
  <published>2018-08-17T00:41:54+05:30</published>
  <updated>2018-08-17T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;The travails of the noble warriors who’ve tried to walk the path of the dependency hell of python have been immortalized in the travelogues of the internet. From &lt;a href=&quot;https://xkcd.com/1987/&quot;&gt;mosaics&lt;/a&gt; ornamenting the holy shrines of &lt;a href=&quot;https://xkcd.com/1987/&quot;&gt;xkcd&lt;/a&gt;, to gospels written in the blogosphere; we’ve been plagued with tales of valor. And yet, python like the heads of the hydra grows two more if you’ve managed to chop one off.&lt;br /&gt;&lt;br /&gt;
Our hero, chose the path of pyenv - a recondite cult who claim to have conquered the versions of python. While all was the well in the land of pyenv’s python-2.7.9, until one day when he had to tackle a new villan in town - data visualizations. His best bet was to use jupyter - no, ipython wasn’t enough - and so he embarked on a perilous path. In his first attempt he used the incantation of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install jupyter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Things worked well and a kernel appeared to fulfil his commands until asked to plot, when kernel came crashing down.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ModuleNotFoundError: No module named &lt;span class=&quot;s1&quot;&gt;&amp;#39;_tkinter&amp;#39;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#_ This comment preserves formatting in vim&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The helpful folks from the land of stackoverflow suggested a spell to resuscitate the kernel.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip uninstall jupyter numpy pandas matplotlib
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install tk-dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install jupyter numpy pandas matplotlib&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And viola, and darkness took over and python-2.7.9. Scared and lonely in the world of the internet, our hero did the only logical thing.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pyenv uninstall 2.7.9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;He took over the responsibility of the python world and annihilated it. Sometimes you have to let go of the past. Kill it if you have to. So he did, only to create a new one like the Oracle in Matrix. But this time he was determined, he went through the valleys of medium, the hills of StackOverflow and the plains of GitHub to learn of the one true spell.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pyenv install 2.7.9
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install --upgrade pip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip uninstall enum enum34
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install enum34 --upgrade
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install cryptography
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install numpy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install pandas
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install matplotlib
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install jupyter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And in the moment he saw the reflection of the one true UNIX kernel. He had done it, he had vanquished data visualizations and walked the fiery dependency hell of python.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/how-to-train-your-python-2-7/&quot;&gt;How to Train Your Python - 2.7&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 17, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Travelogue - Russia, 2018]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/travelogue/travelogue-russia-2018/" />
  <id>//srijanshetty.in/travelogue/travelogue-russia-2018</id>
  <published>2018-08-12T20:39:01+05:30</published>
  <updated>2018-08-12T20:39:01+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Goodbyes are hard, and seldom perfect, especially when humdrum lives that lay ahead sink in. Standing at the prow of the cruise basking in the millions lights of Moscow, I felt debilitated by reality - these ten days were whimsical, yet I felt it slipping away and the harder I tried to capture it, the faster it slipped. In our foolhardy attempts to capture the moment, we’ve forgotten how to live them. Not everything needs the testimony of a photograph, not every memory needs to be validation of your fraternity. Some moments are inexorably lived then and there and left to the agency of the human mind. And so I let myself go, emboldened by the wine, I let the warmth of my friends sink in to the bittersweet symphony of endings.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/travelogue/travelogue-russia-2018/&quot;&gt;Travelogue - Russia, 2018&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 12, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Call (Me) by (Your) Name: Python Is Pass by What Again?]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/call-me-by-your-name-python-is-pass-by-what-again/" />
  <id>//srijanshetty.in/technical/call-me-by-your-name-python-is-pass-by-what-again</id>
  <updated>2018-06-05 10:14:37 +0530T00:00:00-00:00</updated>
  <published>2018-06-05T10:14:37+05:30</published>
  
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Full disclosure, I haven’t read the book or watched the film, but the name (pun intended)
gets across the point I want to make about python &lt;strong&gt;names&lt;/strong&gt;. (Note how I use the term &lt;strong&gt;names&lt;/strong&gt;
and not &lt;strong&gt;variables&lt;/strong&gt; or &lt;strong&gt;references&lt;/strong&gt;, which will strike a chord in a few minutes).&lt;br /&gt;&lt;br /&gt;
On the C side of things, you have &lt;em&gt;call-by-value&lt;/em&gt;, and on the Java/ECMAScript side of the world,
you have &lt;em&gt;call-by-reference&lt;/em&gt;. But python, is sly, and while on the surface you’ll think python is
&lt;em&gt;call-by-reference&lt;/em&gt;, it’s a different barnacled monstrosity. Python is what you might call,
&lt;em&gt;&lt;a href=&quot;https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/&quot;&gt;call-by-name&lt;/a&gt;&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;
Here’s an innocuous piece of code, which for some inexplicable reason doesn’t produce the expected
output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Despite the code being synthetic, it underscores an important point. In this particular example,
the output on the console is &lt;strong&gt;[1,2]&lt;/strong&gt; and not &lt;strong&gt;[1]&lt;/strong&gt;. How on earth is that possible, you ask?
Well, the answer to this mystery lies in the fact that python is &lt;em&gt;call-by-name.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;
In the &lt;em&gt;call-by-name&lt;/em&gt; model, a name (or a variable in common parlance) is bound to an object. In the &lt;em&gt;main&lt;/em&gt;,
&lt;strong&gt;arr&lt;/strong&gt; is bound to the object &lt;strong&gt;[1,2]&lt;/strong&gt;. Initially in mutate, &lt;strong&gt;ls&lt;/strong&gt; is bound to the same object &lt;strong&gt;[1,2]&lt;/strong&gt;
- note, how we say bound to an object and not a reference to a memory location, unlike C/Java/ECMAscript
- but, on the very first line of &lt;em&gt;mutate&lt;/em&gt;, we bind ls to a new object &lt;strong&gt;[]&lt;/strong&gt;, and hence forth the binding
of &lt;strong&gt;[1,2]&lt;/strong&gt; is hidden from &lt;em&gt;mutate&lt;/em&gt;. Any changes to &lt;strong&gt;ls&lt;/strong&gt; will not be reflected back to &lt;strong&gt;arr&lt;/strong&gt; as they are bound
to different objects.&lt;br /&gt;&lt;br /&gt;
While this might seem pedantic, and left to language purists. This erudite fact can manifest in hard to
find bugs. For example, the following code has a surprising output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of this code is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python test.py
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1, 2, 3, 4, 2, 6&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1, 2, 3, 4, 2, 6&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second conditional becomes a no-op as &lt;strong&gt;arr&lt;/strong&gt; won’t be mutated once it’s length is greater than 5. Ipso facto,
&lt;em&gt;call-by-name&lt;/em&gt; is evident right now, but in longer methods its to discern and impossible to debug.&lt;br /&gt;&lt;br /&gt;
So, next time recall that python does call (me) by (your) name.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/call-me-by-your-name-python-is-pass-by-what-again/&quot;&gt;Call (Me) by (Your) Name: Python Is Pass by What Again?&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on June 05, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Honey, I Did a Bare Except]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/honey-i-did-a-bare-except/" />
  <id>//srijanshetty.in/technical/honey-i-did-a-bare-except</id>
  <updated>2018-05-25 11:10:19 +0530T00:00:00-00:00</updated>
  <published>2018-05-25T11:10:19+05:30</published>
  
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;So, what you might ask? In fact you might have seen this blasphemy time and time again:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or this variation written by another apostate (me, a few days ago):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Some code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While we may be blinded in the present, at some point your future-self will want to travel back in time
and smack you for your idiocy, like I wanted to, for this mea cupla.&lt;br /&gt;&lt;br /&gt;
The fundamental issue with &lt;strong&gt;bare excepts&lt;/strong&gt; as they’re called in &lt;em&gt;idiomatic python&lt;/em&gt; is, - as mentioned earlier -
these gremlins come back and bite you. &lt;br /&gt;&lt;br /&gt;
While trying to automate file uploads from my laptop to a cloud storage, I had a rogue IO function which
once, stalled indefinitely. Since I was uploading multiple files in sequence, this would halt the entire
program; (yes, I could use threads but that discussion is best left for another day).
Since this was all wrapped up in a busy loop which watched for changes, I was okay with one off failures.
In an attempt to tame the function I decided to use &lt;em&gt;SIGALRM&lt;/em&gt; and this is when my foolishness dawned upon
me.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;signal&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessTimeoutException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessTimeoutException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;db_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;#39;m going to eat the error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGALRM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessTimeoutException&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Never reaches&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you notice what’s wrong with the above snippet? &lt;strong&gt;db_call&lt;/strong&gt; ends up eating &lt;em&gt;all&lt;/em&gt; exceptions, which renders
my timeout logic ineffective.&lt;br /&gt;&lt;br /&gt;
The solution, you ask? Well, there’s little that we can do without using &lt;em&gt;threads&lt;/em&gt; or a &lt;em&gt;monitor process&lt;/em&gt; which
kills this script when it notices there’s no progress (the monitor in turn ascertain progress using the OS
or IPC flags).&lt;br /&gt;&lt;br /&gt;
So, as a favour to your future self, kindly avoid going bare (with exceptions).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/honey-i-did-a-bare-except/&quot;&gt;Honey, I Did a Bare Except&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on May 25, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Zombieland: Zombie Children Eating Memory]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/zombie-children-eating-memory/" />
  <id>//srijanshetty.in/technical/zombie-children-eating-memory</id>
  <updated>2018-05-16 00:24:38 +0530T00:00:00-00:00</updated>
  <published>2018-05-15T10:58:38+05:30</published>
  
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Children have issues, especially when you try to kill them incorrectly and they come back as
zombies - just in case, I’m talking about process children in linux (don’t arrest me please).&lt;br /&gt;&lt;br /&gt;
Here’s a snippet of code from a personal project:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you notice what’s wrong with the above snippet? (Apart from the horrid error handling,
and the fact that I’ve ignored that the children must have async-signal-safe signal handlers
present.)&lt;br /&gt;&lt;br /&gt;
You’ll be leaving zombies all over the OS!&lt;br /&gt;&lt;br /&gt;
It took me a while to figure out the (mostly) correct way to handle killing your own (process’)
children safely:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGTERM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Wow. your children are really obedient&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeoutExpired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# For a bad process this will ensure that we send it a sigkill&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGKILL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Close call, we need the big guns, but at least they&amp;#39;re dead now&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;psutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeoutExpired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Zombies have escaped. I repeat, zombies have escaped&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let me explain what’s going on here. The first &lt;em&gt;terminate&lt;/em&gt; sends a &lt;strong&gt;SIGTERM&lt;/strong&gt; to the child and then we
do a blocking 45 seconds wait on the child process in order to reap it. If all goes according to plan,
we would have successfully killed the process. But if the powers that be conspire, we might have to bring out
the big guns with &lt;strong&gt;SIGKILL&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;
The second &lt;strong&gt;SIGKILL&lt;/strong&gt; is where things get interesting, all process accept &lt;strong&gt;SIGKILL&lt;/strong&gt; and shold terminate
in an ideal worldbut they still might remain as zombies - those beautiful adolescent teen years.
The second wait with a shorter interval tries reaps such processes. (You could ideally keep the timeout at 0,
which will convert it to a non blocking call.)&lt;br /&gt;&lt;br /&gt;
At this point if the zombies don’t die, your only option is to wait for the apocalypse. Or you could
nuke the parent and hope the zombies don’t become orphan zombies. (Yikes)&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/zombie-children-eating-memory/&quot;&gt;Zombieland: Zombie Children Eating Memory&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on May 15, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Afflatus Begins]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/prose/afflatus-begins/" />
  <id>//srijanshetty.in/prose/afflatus-begins</id>
  <updated>2018-05-07 10:58:38 +0530T00:00:00-00:00</updated>
  <published>2018-05-07T10:58:38+05:30</published>
  
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I would be lying to you if I told you that this is the first time I’ve tried to pen down this particular post. The idea of this blog post has existed for quite some time; but each half baked attempt has ended up in the bottomless pit of my unpublished ramblings.&lt;/p&gt;

&lt;p&gt;Alas, life is transitory and I’ve decided that I no longer will seek absolution in my words. That hope is forlorn.&lt;/p&gt;

&lt;p&gt;The modus operandi of this blog will be simple. At times, I intend to present coherent arguments for both sides of a debate; but mostly, it’ll be excerpts and ramblings from a mind addled by a quarter life crisis. Or it’ll be a technical post, to keep all things balanced.&lt;/p&gt;

&lt;p&gt;So, let’s hope that the afflatus stays for long. If not, the depression of social media would be my only recourse.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/prose/afflatus-begins/&quot;&gt;Afflatus Begins&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on May 07, 2018.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Installing Scikit and Numpy in Ubuntu]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/installing-scikit-and-numpy-in-ubuntu/" />
  <id>//srijanshetty.in/technical/installing-scikit-and-numpy-in-ubuntu</id>
  <published>2016-02-14T21:15:35+05:30</published>
  <updated>2016-02-14T21:15:35+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;After sifting through multiple stack-overflow answers and blog posts, here is a list of consolidated steps to install scipy stack on Ubuntu 14.04. (I’m currently using Elementary OS Freya which is a derivative of Ubuntu 14.04).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install python-pip python-setuptools python-dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libjpeg-dev zlib1g-dev &lt;span class=&quot;c&quot;&gt;# Pillow build dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libblas-dev libatlas-dev liblapack-dev gfortran &lt;span class=&quot;c&quot;&gt;# Scipy dependencies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install g++ &lt;span class=&quot;c&quot;&gt;# Sciki-lean dependency&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install cython &lt;span class=&quot;c&quot;&gt;# Scikit-image dependency&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install libenchant-dev &lt;span class=&quot;c&quot;&gt;# PyEnchant dependency&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install scipy numpy &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use pyenv, not sudo&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/installing-scikit-and-numpy-in-ubuntu/&quot;&gt;Installing Scikit and Numpy in Ubuntu&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on February 14, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Tasker Appendix]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/tasker/tasker/" />
  <id>//srijanshetty.in/tasker/tasker</id>
  <updated>2016-01-31 23:42:34 +0530T00:00:00-00:00</updated>
  <published>2016-01-31T23:42:34+05:30</published>
  
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve been spending a lot of time trying to automate some of the more annoying mundane tasks on my phone using Tasker and the Auto Apps suite of late which has led to the cumulation of a body of knowledge which is relatively hard to find; and in an attempt to give back to society &lt;em&gt;coughs&lt;/em&gt;, here are some handy tricks. (posts coming soon)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running AutoInput when the screen is off.&lt;/li&gt;
  &lt;li&gt;Daily backups using Titanium Backup free version. (buy the full version and support the developer).&lt;/li&gt;
  &lt;li&gt;Getting Google Play to speak out the artist name when the headset is plugged in.&lt;/li&gt;
  &lt;li&gt;On Boot Accessibility Jobs.&lt;/li&gt;
  &lt;li&gt;SMS activated lock screen.&lt;/li&gt;
  &lt;li&gt;Playing YouTube videos in background.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until the next post.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/tasker/tasker/&quot;&gt;Tasker Appendix&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on January 31, 2016.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Travelogue - Paris]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/travelogue/travelogue-paris/" />
  <id>//srijanshetty.in/travelogue/travelogue-paris</id>
  <published>2015-11-28T13:50:03+05:30</published>
  <updated>2015-11-28T13:50:03+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Alas there were more than two,&lt;br /&gt;
A beautiful maid - male a few.&lt;br /&gt;
Willing caught in this deja - vu,&lt;br /&gt;
the young lad; his story anew,&lt;br /&gt;
still at odds in the battle of two.&lt;br /&gt;
Lest he was cursed, it had to be;&lt;br /&gt;
The one scarred - couldn’t see.&lt;br /&gt;
It stirred, the dove was set free;&lt;br /&gt;
stoic his aide, oblivion enemy,&lt;br /&gt;
the vanguard so took his stride,&lt;br /&gt;
a sullen brow, a callous hide,&lt;br /&gt;
a tale to tell, a pen to confide.&lt;br /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/travelogue/travelogue-paris/&quot;&gt;Travelogue - Paris&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on November 28, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Wastelands]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/poems/wastelands/" />
  <id>//srijanshetty.in/poems/wastelands</id>
  <published>2015-10-10T18:43:32+05:30</published>
  <updated>2015-10-10T18:43:32+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;He trudged in the wastelands,&lt;br /&gt;
The ruins of the great sands,&lt;br /&gt;
Of hopes; unrelenting desire,&lt;br /&gt;
Of passion; an everlasting fire,&lt;br /&gt;
Now withered and forlorn,&lt;br /&gt;
Forgotten, scathed and torn.&lt;br /&gt;
Lost cause and no ambition,&lt;br /&gt;
Dead men seeking salvation.&lt;br /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/poems/wastelands/&quot;&gt;Wastelands&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on October 10, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[CLI Goodies]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/cli-goodies/" />
  <id>//srijanshetty.in/technical/cli-goodies</id>
  <published>2015-09-27T17:43:02+05:30</published>
  <updated>2015-09-27T17:43:02+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;Today, I finally have most of the goodness of my shell packed as a single repository. I say most because, I still have some things stuck in antigen with no clear migration path. Until then give these goodies a whirl, and do give a shout out to me if you need any help setting them up; I’ve added instructions of getting them up and ready with the common - a metric defined by the number of GitHub stars the framework has - frameworks out there. (My favourite is undoubtedly &lt;code&gt;Prezto&lt;/code&gt; for it’s super fast startup).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Installing under &lt;a href=&quot;https://github.com/sorin-ionescu/prezto&quot;&gt;Prezto&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .zprezto
  git submodule add https://github.com/srijanshetty/cli-goodies.git modules/cli-goodies&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add &lt;code&gt;cli-goodies&lt;/code&gt; to your &lt;code&gt;.zpreztorc&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Set the Prezto modules to load (browse modules).
  # The order matters.
  zstyle &amp;#39;:prezto:load&amp;#39; pmodule \
    &amp;#39;environment&amp;#39; \
    &amp;#39;terminal&amp;#39; \
    &amp;#39;editor&amp;#39; \
    &amp;#39;history&amp;#39; \
    &amp;#39;directory&amp;#39; \
    &amp;#39;spectrum&amp;#39; \
    &amp;#39;utility&amp;#39; \
    &amp;#39;completion&amp;#39; \
    &amp;#39;prompt&amp;#39; \
    &amp;#39;cli-goodies&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing under oh-my-zsh&lt;/strong&gt;&lt;br /&gt;
I haven’t tried using &lt;code&gt;cli-goodies&lt;/code&gt; with &lt;code&gt;oh-my-zsh&lt;/code&gt; and I think the following should work in theory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://raw.github.com/srijanshetty/cli-goodies/master/init.zsh -O &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.oh-my-zsh/custom/cli-goodies.zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Installing using &lt;a href=&quot;https://github.com/zsh-users/antigen&quot;&gt;Antigen&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;
If you use &lt;a href=&quot;https://github.com/zsh-users/antigen&quot;&gt;Antigen&lt;/a&gt;, adding the following line to &lt;code&gt;.zshrc&lt;/code&gt; should load &lt;code&gt;cli-goodies&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;antigen-bundle srijanshetty/zsh-dwim&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;cli-goodies&lt;/code&gt; anywhere else&lt;/strong&gt;&lt;br /&gt;
Anyone running &lt;code&gt;zsh&lt;/code&gt; should only need to add the following line to their &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;init.zsh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;You’ll need to install &lt;code&gt;peru&lt;/code&gt; to get the completions working. Peru is a simple file downloader with a declarative syntax. While &lt;code&gt;curl&lt;/code&gt; could be used to accomplish the same, &lt;code&gt;peru&lt;/code&gt; is simpler to read.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pip install peru
peru sync&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Completions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sampsyo/beets/blob/master/extra/_beet&quot;&gt;_beet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/s7anley/zsh-geeknote/master/_geeknote&quot;&gt;_geeknote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Schnouki/git-annex-zsh-completion/master/_git-annex&quot;&gt;_git-annex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-cli/master/completion/zsh&quot;&gt;_grunt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/gulp-autocompletion-zsh/master/_gulp&quot;&gt;_gulp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/zsh-pip-completion/master/_pip&quot;&gt;_pip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/zsh-pandoc-completion/master/_pandoc&quot;&gt;_pandoc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rvm/rvm/master/scripts/extras/completion.zsh/_rvm&quot;&gt;_rvm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/oscardelben/sheet/master/contrib/completion/sheet.zsh&quot;&gt;_sheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/github/hub/blob/master/etc/hub.zsh_completion&quot;&gt;_hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/offline/blob/master/_offline&quot;&gt;_offline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/srijanshetty/sdp/master/_sdp&quot;&gt;_sdp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/_repos&quot;&gt;_repos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Scripts/Functions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/cron-wallpaper&quot;&gt;cron-wallpaper&lt;/a&gt;: Change wallpapers using cron.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/dnd&quot;&gt;dnd&lt;/a&gt;: DND mode for Elementary OS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/folder2md&quot;&gt;folder2md&lt;/a&gt;: Convert a directory tree to markdown.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/offline&quot;&gt;offline&lt;/a&gt;: Stores commands when offline and execute later in batch.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/pastebin&quot;&gt;pastebin&lt;/a&gt;: Create a pastie using &lt;a href=&quot;http://sprunge.us&quot;&gt;sprunge.us&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/proxy&quot;&gt;proxy&lt;/a&gt;: Enable/disable proxy settings.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/repos&quot;&gt;repos&lt;/a&gt;: Helper for &lt;a href=&quot;myrepos.branchable.com&quot;&gt;myrepos&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/sdp&quot;&gt;sdp&lt;/a&gt;: scp for directories.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;functions/showtoiletfonts&quot;&gt;showtoiletfonts&lt;/a&gt;: Show available toilet fonts.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/srijanshetty/stats-cli&quot;&gt;stats-cli&lt;/a&gt;: Compute avg, sd, min, max from a list.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://transfer.sh&quot;&gt;transfer&lt;/a&gt;: Use &lt;a href=&quot;https://transfer.sh&quot;&gt;transfer.sh&lt;/a&gt; to transfer files from the CLI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that you have fun using these tools as much as I do. PRs are encouraged.&lt;br /&gt;&lt;br /&gt;
Fin.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/cli-goodies/&quot;&gt;CLI Goodies&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 27, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Mastering Custom Site Search in Chrome]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/hacks/mastering-search-in-chrome/" />
  <id>//srijanshetty.in/hacks/mastering-search-in-chrome</id>
  <published>2015-09-13T19:36:38+05:30</published>
  <updated>2015-09-13T19:36:38+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Chrome was the shiny, fast browser which caused me to shift from firefox; and even after chrome has become the still shiny, slow mess that it has become, I find it hard to move away due to some really awesome inbuilt features of chrome. My favourite amongst them is the ability to leverage any site’s search functionality. I’m pretty sure that you might have noticed that pressing &lt;code&gt;[Tab]&lt;/code&gt; after typing youtube in the search bar allows you to search youtube directly from the search bar. What’s really fun is that this functionality can be extended to any website as long as it searched using a URL query.&lt;br /&gt;&lt;br /&gt;
For example, I’ll show you how to automate searching within the settings of chrome.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Firstly navigate to &lt;strong&gt;chrome://settings&lt;/strong&gt; - and yes, I like to type that out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the search section, you’ll see a &lt;strong&gt;Manage Search Engines&lt;/strong&gt; option.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
	&lt;a href=&quot;/images/manage-search-engines.png&quot;&gt;&lt;img src=&quot;/images/manage-search-engines.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scroll to the end of the list of search engines, where it says that you can &lt;code&gt;Add a new search engine&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To add a new search engine, you need to name it and additionally give it a &lt;code&gt;trigger&lt;/code&gt;. The trigger
 is the key which followed by a &lt;code&gt;Tab&lt;/code&gt; on the omnibar lets chrome know your intent of searching the site
 instead of merely visiting it. Here I’ve used &lt;code&gt;csettings&lt;/code&gt; as a trigger.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;a href=&quot;/images/example-search-engine.png&quot;&gt;&lt;img src=&quot;/images/example-search-engine.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Fin.&lt;/li&gt;
&lt;/ul&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/hacks/mastering-search-in-chrome/&quot;&gt;Mastering Custom Site Search in Chrome&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 13, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Nothingness]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/poems/nothingness/" />
  <id>//srijanshetty.in/poems/nothingness</id>
  <published>2015-09-03T23:20:38+05:30</published>
  <updated>2015-09-03T23:20:38+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;An attempt at free verse.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The light at the end of the tunnel,&lt;br /&gt;
Unrequited hope and unending faith -&lt;br /&gt;
All artifacts of our weak minds,&lt;br /&gt;
Desperate cries of pitiful hearts.&lt;br /&gt;&lt;br /&gt;
We crave endings, seek meanings,&lt;br /&gt;
For we don’t want, we can’t bear,&lt;br /&gt;
The dark reality, the sad tragedy,&lt;br /&gt;
Of living without consequence,&lt;br /&gt;
Of dying without resurgence.&lt;br /&gt;&lt;br /&gt;
Hell and heaven were never the artifacts of religion,&lt;br /&gt;
They’ve been our inability to reconcile nothingness.&lt;br /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/poems/nothingness/&quot;&gt;Nothingness&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 03, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Chromecast and Linux]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/hacks/chromecast-and-linux/" />
  <id>//srijanshetty.in/hacks/chromecast-and-linux</id>
  <published>2015-08-23T16:15:50+05:30</published>
  <updated>2015-08-23T16:15:50+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;TL;DR The Chromecast chrome extension works even on linux.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After trying to get &lt;a href=&quot;https://github.com/albfan/miraclecast&quot;&gt;Miraclecast&lt;/a&gt; working with &lt;strong&gt;Elementary OS Freya&lt;/strong&gt;,a couple of times,I finally bit the bullet and bought a Chromecast. In retrospect, I took the decision in impulse and didn’t do the necessary due diligence before making the purchase. I loved the Chromecast from the moment I started playing with it and it worked seemlessly with my Android Phone but imagine the trauma I had to go through when I realized that Chromecast is not officially supported on linux. And while there were many hacks namely using samba server or Plex to get it working with Linux - and I’m always game for a hack - it was a very baffling that Chromecast, which works on Windows doesn’t work on Linux, because both have the same underlying engine - Chrome. So, I decided to give the chrome extension a whirl on Linux and to my pleasant surprise - it worked.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/hacks/chromecast-and-linux/&quot;&gt;Chromecast and Linux&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 23, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Estranged]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/poems/estranged/" />
  <id>//srijanshetty.in/poems/estranged</id>
  <published>2015-08-20T22:23:15+05:30</published>
  <updated>2015-08-20T22:23:15+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;Two roads diverged in a wood, and estranged they stood.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a minute there I wanted time to stop,&lt;br /&gt;
A thousand answers whirred by,&lt;br /&gt;
With no semblance to the question at top.&lt;br /&gt;&lt;br /&gt;
Words felt heavy, and my breath was lost,&lt;br /&gt;
A wandering spirit, a guilt, and a rumour of loss,&lt;br /&gt;
Not reason, it was absolution I sought.&lt;br /&gt;&lt;br /&gt;
We had trudged along, enduring our plight,&lt;br /&gt;
Numbed by our pain, seeking respite,&lt;br /&gt;
Dreaming together, in the search of light.&lt;br /&gt;&lt;br /&gt;
No direction, and this inheritance of loss,&lt;br /&gt;
In our love of shared pain, and lost cause,&lt;br /&gt;
Being alone, with each other, in this chaos.&lt;br /&gt;&lt;br /&gt;
Yes, I’d erred, I had lost her hand,&lt;br /&gt;
Not knowing what that had meant,&lt;br /&gt;
I’m now left with ruins in the sand.&lt;br /&gt;&lt;br /&gt;
These echoes of silence, my hopeless cries,&lt;br /&gt;
Hallow my way - the scars of a past life,&lt;br /&gt;
Guiding my path, amidst these many lies.&lt;br /&gt;&lt;br /&gt;
The minute was gone, the thought was spent,&lt;br /&gt;
And even if I yearned, or asked for more,&lt;br /&gt;
The deed was done, no wise of what it meant.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/poems/estranged/&quot;&gt;Estranged&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 20, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Travelogue - Central Park, NY]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/travelogue/travelogue-central-park-ny/" />
  <id>//srijanshetty.in/travelogue/travelogue-central-park-ny</id>
  <published>2015-08-04T08:16:40+05:30</published>
  <updated>2015-08-04T08:16:40+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;It’s the search of greener pastures,&lt;br /&gt;
The fear of these barren lands,&lt;br /&gt;
The tireless flow of currents,&lt;br /&gt;
The fear of being left ashore.&lt;br /&gt;&lt;br /&gt;
The pursuit of infinity,&lt;br /&gt;
The fear of being average.&lt;br /&gt;
The search of Neverland,&lt;br /&gt;
Lest you remain anchored.&lt;br /&gt;&lt;br /&gt;
Fuels an eclectic passion,&lt;br /&gt;
A desire to transcend,&lt;br /&gt;
To nourish, to create,&lt;br /&gt;
To leave, and to move.&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/travelogue/travelogue-central-park-ny/&quot;&gt;Travelogue - Central Park, NY&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 04, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
