<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Srijan R. Shetty</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="//srijanshetty.in/feed.xml" />
<link rel="alternate" type="text/html" href="//srijanshetty.in" />
<updated>2023-08-09T09:08:58+05:30</updated>
<id>//srijanshetty.in/</id>
<author>
  <name>Srijan R. Shetty</name>
  <uri>//srijanshetty.in/</uri>
  <email>srijan.shetty+code@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[OARS, SQL Injections and Paper Backups]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/write-ups/oars-sql-injections-and-paper-backups/" />
  <id>//srijanshetty.in/write-ups/oars-sql-injections-and-paper-backups</id>
  <published>2023-08-01T20:00:00+05:30</published>
  <updated>2023-08-01T20:00:00+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;OARS - Four letters that could fill any graduate of IIT Kanpur from 2009 to 2015 with abject horror.&lt;br /&gt;&lt;br /&gt;
While presented as a system to register for courses for the next semester, it was a machine of widespread torture by crushing your hopes and your soul at the exact moment that they are the highest. The beauty of OARS was that it was universally hated by both students and professors, a common themes across most of IIT Kanpur.&lt;br /&gt;&lt;br /&gt;
An apocryphal story states that OARS was cobbled together by a few undergraduates over a summer, and things turned for the worst when it gained sentience. Probably some reader might shed light on the real origin story of OARS.&lt;br /&gt;&lt;br /&gt;
This story is not about the origins of OARs though, it’s about how a close friend found out an SQL injection attack that gave them root access to OARS - I would have loved to take credit, but alas that would be a lie. The said friend had access to the academic records of every student on the campus, and since they were honour bound they never did anything more with it (or did they?).&lt;br /&gt;&lt;br /&gt;
The Dean of Academic Affairs knew about the shortcomings of OARS - he was also the professor who eventually slayed the demon of OARS to another demon, which I’ve heard doesn’t give students cold sweats a day before registrations. When we approached him with the potential vulnerability, he responded with absolutely no change in expression - “That means that what I’ve been teaching in computer security has been useful to you lot. Also, having access doesn’t really make much difference, we have paper records and emails are triggered on every change. You’re bound by the honour code, so the best you can do is swoop around but that you could do anyways if you are ‘smart’ enough.”&lt;br /&gt;&lt;br /&gt;
We were dumbfounded, for not only did he sign us to a honour contract at the spot, but also told us that we could have a field day because there were other Easter Eggs on the network. It was akin to giving kids unrestricted access to the candy shop.&lt;br /&gt;&lt;br /&gt;
This was a defining moment because you have to admit that sometimes plain old paper records are a secure format and all our fancy dandy security might fall short. A professor bound us by an imaginary honor contract, and three all we did was use our access to build an API so that students could search OARS in a better manner and get to know the top 10 students in each year.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/write-ups/oars-sql-injections-and-paper-backups/&quot;&gt;OARS, SQL Injections and Paper Backups&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 01, 2023.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[The based professors of IIT Kanpur - Professor TVP]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/write-ups/based-professors-of-iitk-professor-tvp/" />
  <id>//srijanshetty.in/write-ups/based-professors-of-iitk-professor-tvp</id>
  <published>2023-05-01T20:00:00+05:30</published>
  <updated>2023-05-01T20:00:00+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Professors in Indian Institute of Technology, Kanpur are based and here is another story of such a professor.&lt;br /&gt;&lt;br /&gt;
IIT Kanpur provides complete autonomy to professors, they can run the classes according to their whims and
fancies.&lt;br /&gt;&lt;br /&gt;
The reason we don’t have mandatory attendance is the professors only want interested students, and yet some classes are jam packed.&lt;br /&gt;&lt;br /&gt;
One such professor was Professor TVP. If you imagine professors being grumpy old men with pot bellies, you’ll be wrong more often than not in college.&lt;br /&gt;&lt;br /&gt;
Professor TVP sported grey hair, but that’s the only indication of him being aged as his energy in the class was infectious.&lt;br /&gt;&lt;br /&gt;
It’s was April 1st and while everyone was in the class, no one really wanted to study that day. The day was nice and sunny, and considering it was “April’s Fool’s”, the devil is bound to have some fun.&lt;br /&gt;&lt;br /&gt;
As soon as the professor entered and and before he could utter a single word, a student stood up deadpan and
said:&lt;br /&gt;&lt;br /&gt;
“It’s Aprils Fool’s day today and we should not study.”&lt;br /&gt;&lt;br /&gt;
A normal professor would shut down such a student - but not Professor TVP. In his zest he said.&lt;br /&gt;&lt;br /&gt;
“I absolutely agree.”&lt;br /&gt;&lt;br /&gt;
Silence. The students were in shock and awe.&lt;br /&gt;&lt;br /&gt;
“The day is nice and sunny, let’s go grab some chai in CC canteen. Treat’s on me.”&lt;br /&gt;&lt;br /&gt;
And so all 40 students, walked to and gheroed CC canteen grabbing some chai amongst some ridiculously nosy peacocks (story for another time).&lt;br /&gt;&lt;br /&gt;
Told you, never underestimate the Professors of IIT Kanpur. They can surprise you.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/write-ups/based-professors-of-iitk-professor-tvp/&quot;&gt;The based professors of IIT Kanpur - Professor TVP&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on May 01, 2023.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[The based professors of IIT Kanpur - Professor Biswas]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/write-ups/based-professors-of-iitk-professor-biswas/" />
  <id>//srijanshetty.in/write-ups/based-professors-of-iitk-professor-biswas</id>
  <published>2023-03-01T20:00:00+05:30</published>
  <updated>2023-03-01T20:00:00+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This wasn’t because we had diligent students who attended all classes, on the contrary Indian Institute of Technology, Kanpur didn’t have a mandatory attendance policy.&lt;br /&gt;&lt;br /&gt;
And yet, the rumour mill didn’t churn with the news of a ‘mass bunk’, until CSE Y11 did.&lt;br /&gt;&lt;br /&gt;
It was the last class before spring break of 2013 and Professor Biswas was teaching us ‘Abstract Algebra’ (side note, it’s still abstract for me). Ten minutes before the class, a student decides to pull off a legendary coup - he just needs to convince 10 students.&lt;br /&gt;&lt;br /&gt;
The first seven students are easy to convince, it’s the last three - the most studious of the lot which take the most time. But he prevails and convinces an entire class to ‘mass bunk’.&lt;br /&gt;&lt;br /&gt;
What happens in the following days is something unique - silence. No angry emails by the professor, no students asked to visit the professor’s cabin. There isn’t even a minor mention in the corridors of the Motwani building.&lt;br /&gt;&lt;br /&gt;
Post spring-break as we enter Professor Biswas’s class, there is an air of mystery.&lt;br /&gt;&lt;br /&gt;
Professor Biswas enters the class in his usual style - a grey mane with Rayban aviators, all he needed was a leather jacket to be in an American movie about a renegade teacher. In a very anti-climactic fashion, he pounces straight to the board and starts teaching Chapter 14.&lt;br /&gt;&lt;br /&gt;
This is when a general dread kicks in across the classroom - we were on Chapter 9. When a brave students points out this discrepancy to the professor, he casually mentions:&lt;br /&gt;&lt;br /&gt;
“I finished chapters 9 to 14 in the previous class”.&lt;br /&gt;&lt;br /&gt;
“Also, I conducted a quiz. Students can collect their answer sheets from my cabin later in the day”&lt;br /&gt;&lt;br /&gt;
It’s time for the students to remain silent. Shell shocked, Professor Biswas had the last laugh.&lt;br /&gt;&lt;br /&gt;
We learnt a valuable lesson, you don’t mess with professors, especially the professors at IIT Kanpur.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/write-ups/based-professors-of-iitk-professor-biswas/&quot;&gt;The based professors of IIT Kanpur - Professor Biswas&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on March 01, 2023.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[On missing the shared intimacy of friendships]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/prose/shared-experiences/" />
  <id>//srijanshetty.in/prose/shared-experiences</id>
  <published>2022-11-22T00:04:54+05:30</published>
  <updated>2022-11-22T00:04:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;What really hurts is not the loss of friendship, but the loss of intimacy. The ability to walk into your best friend’s room at a moment’s notice, the roar of laughter in the room next door when you return from your classes. The spontaneous eruption of joy and tears over a few drinks you smuggled into the hostel from the prying eyes of the guards.&lt;br /&gt;&lt;br /&gt;
As you grow older and friendships yonder, you miss not a time long lost, you miss the shared experience of it all. Our digital existence can never fill the void of shared experiences, and in our pursuit of ambition we often let these experiences slide. Human presence is abstract and in our hapless hope that the lack of thereof can still power friendships, we carry on.&lt;br /&gt;&lt;br /&gt;
It’s not adulting, it’s the human condition. We consistently seek strifes as we believe that it’s the struggles that give our existence meaning, and when the hangman comes knocking he’ll smile over our futility in giving up something valuable in pursuit of something that never existed.&lt;br /&gt;&lt;br /&gt;
Srijan R Shetty&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/prose/shared-experiences/&quot;&gt;On missing the shared intimacy of friendships&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on November 22, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Moving 4 TB across cloud storage providers for free]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/hacks/rclone-moving-files/" />
  <id>//srijanshetty.in/hacks/rclone-moving-files</id>
  <published>2022-09-29T00:41:54+05:30</published>
  <updated>2022-09-29T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Ever run into the problem of maxing out your cloud capacity in one provider (most possibly on the free tier) and being
left with no other solution but to upgrade because you can’t move your data?&lt;br /&gt;&lt;br /&gt;
Or got into the solution of migrating data from a work account to a backup?&lt;br /&gt;&lt;br /&gt;
I got into somewhat of a fix lately as I had to transfer over 4TB of data from AWS to a Google Drive account (with
infinite free storage, courtesty my alma mater). What makes matters worse is that I have only 4TB of metered usuage in
my broadband network, post which I’m downgraded on speed (and we obviously don’t like slow networks).&lt;br /&gt;&lt;br /&gt;
The final solution that I came up with didn’t drain by broadband quota and didn’t cost me in time or money, which I
think is a great outcome.&lt;br /&gt;&lt;br /&gt;
The trick is to run the transfer on a VPS solution like &lt;a href=&quot;https://digitalocean.com&quot;&gt;digitalocean&lt;/a&gt;, with &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; to resume
sessions. This allows you to use the bandwidth of the VPS providers and not your home network!&lt;br /&gt;&lt;br /&gt;
Let’s get everything setup:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get a free digital ocean account using this &lt;a href=&quot;https://m.do.co/c/c7d0b328194e&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spin up a basic Ubuntu instance on Digital Ocean.&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://rclone.org/install/&quot;&gt;rclone&lt;/a&gt; using the following command.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; curl https://rclone.org/install.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rclone&lt;/code&gt; is the swiss army knife of transferring files between different service providers, unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt; it does allow
you to transfer between two different hosts and doesn’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;one local node&lt;/code&gt; policy. With rclone setup, the rest is
easy.&lt;br /&gt;&lt;br /&gt;
Install the cloud providers that you want to transfer files between.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rclone config

Name                 Type
&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;====&lt;/span&gt;
dropbox              dropbox
s3                   s3

e&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Edit existing remote
n&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; New remote
d&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Delete remote
r&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Rename remote
c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Copy remote
s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Set configuration password
q&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Quit config
e/n/d/r/c/s/q&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have the source and destination providers setup, the transfer is easy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rclone copy s3:bucket.name/ dropbox:backup/ &lt;span class=&quot;nt&quot;&gt;--ignore-existing&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running with &lt;code class=&quot;highlighter-rouge&quot;&gt;--ignore-existing&lt;/code&gt; makes the process idempotent in case the SSH connection fails. I prefer running the
command in a &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; session so that I can reattach the session in a few days when the transfer might have
completed.&lt;br /&gt;&lt;br /&gt;
Until the next post!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/hacks/rclone-moving-files/&quot;&gt;Moving 4 TB across cloud storage providers for free&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 29, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Handling CORS with cloudflare workers]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/cloudflare-workers-cors/" />
  <id>//srijanshetty.in/technical/cloudflare-workers-cors</id>
  <published>2022-09-26T00:41:54+05:30</published>
  <updated>2022-09-26T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve been experimenting with various &lt;code class=&quot;highlighter-rouge&quot;&gt;new age&lt;/code&gt; deployment and &lt;code class=&quot;highlighter-rouge&quot;&gt;JAMStack&lt;/code&gt; solutions out there.
Since I’ve been using cloudflare for over 8 years (as of writing this post), I thought I’ll give it a shot as a cheap
caching server replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;Redis + Node.js&lt;/code&gt;. Writing the &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt; server to handle requests using &lt;code class=&quot;highlighter-rouge&quot;&gt;Cloudflare Workers&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;KV&lt;/code&gt; is fairly straightforward:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;content-type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json;charset=UTF-8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Handle get requests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Some logic to generate data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Handle post requests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;postRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Some logic to generate data&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And as expected, &lt;code class=&quot;highlighter-rouge&quot;&gt;httpie&lt;/code&gt; was able to perfectly &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; the data. But as soon as I shot up the devconsole to
make a request, I was faced with the dreaded &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; error. Usually solving CORS is fairly straightforward, but this
error was unique as the request wasn’t really throwing any CORS error, it was just returning an empty
response.&lt;br /&gt;&lt;br /&gt;
The way to solve this problem is twofold:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Add a handler for &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Return &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;, on all requests.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;content-type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json;charset=UTF-8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Handle option requests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optionRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;content-type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json;charset=UTF-8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;GET, HEAD, POST, OPTIONS&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Don’t think I was able to find a solution on the internet, but knowing how &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; is handled helped.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/cloudflare-workers-cors/&quot;&gt;Handling CORS with cloudflare workers&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 26, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[ZSH bindkey in MacOSX for Cmd]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/hacks/macos-alt-dot-bindkey/" />
  <id>//srijanshetty.in/hacks/macos-alt-dot-bindkey</id>
  <published>2022-09-21T00:41:54+05:30</published>
  <updated>2022-09-21T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Another short one but very useful trick in my moving from Linux to Mac series.&lt;br /&gt;&lt;br /&gt;
One of my most used shortcuts in the terminal is &lt;code class=&quot;highlighter-rouge&quot;&gt;Alt + .&lt;/code&gt;, which I adapted from my &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; workflow to my &lt;code class=&quot;highlighter-rouge&quot;&gt;zsh&lt;/code&gt; workflow
when I started using zsh. It basically inserts the last word from the previous command. This turns out to be very handy
and I use it multiple times a day.&lt;br /&gt;&lt;br /&gt;
There is no out of the box way to accomplish this on Mac, unless you use &lt;code class=&quot;highlighter-rouge&quot;&gt;iTerm&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
The first step is opening up iTerm preferences and navigate to the keybindings section.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/mac_zsh_keybinding_1.png&quot;&gt;&lt;img src=&quot;/images/mac_zsh_keybinding_1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;iTerm &amp;gt; Preferences &amp;gt; Keybindings&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once in the keybindings section:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In the dialogue select any Keyboard Shortcut you want. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;Cmd + .&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;Send Escape Sequence&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;altdot&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Escape Sequence&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Save&lt;/code&gt; and we’re done!&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;a href=&quot;/images/mac_zsh_keybinding_2.png&quot;&gt;&lt;img src=&quot;/images/mac_zsh_keybinding_2.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Add Keyboard Shorcut with Send Escape Sequence&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The next step is configuring zsh keybindings to process the &lt;code class=&quot;highlighter-rouge&quot;&gt;Escape sequence&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# somewhere in your zsh config&lt;/span&gt;
bindkey &lt;span class=&quot;s2&quot;&gt;&quot;^[altdot&quot;&lt;/span&gt; insert-last-word&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And viola, now the keybindings work. This process works &lt;code class=&quot;highlighter-rouge&quot;&gt;mutatis mundis&lt;/code&gt; for other keybindings that you want to import
from your workflow in bash/zsh from linux.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/hacks/macos-alt-dot-bindkey/&quot;&gt;ZSH bindkey in MacOSX for Cmd&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 21, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Using TouchId for sudo in Mac OSX]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/hacks/sudo-touch-id/" />
  <id>//srijanshetty.in/hacks/sudo-touch-id</id>
  <published>2022-09-14T00:41:54+05:30</published>
  <updated>2022-09-14T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This one is short, I wanted to use TouchId for sudo in Mac OSX.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Edit pam.d&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/pam.d/sudo

&lt;span class=&quot;c&quot;&gt;# Add the following as the first line&lt;/span&gt;
auth sufficient pam_tid.so&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Works like a charm.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/hacks/sudo-touch-id/&quot;&gt;Using TouchId for sudo in Mac OSX&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 14, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Polygon Devfolio Fellowship]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/polygon-devfolio-fellowship/" />
  <id>//srijanshetty.in/technical/polygon-devfolio-fellowship</id>
  <published>2022-09-12T18:32:54+05:30</published>
  <updated>2022-09-12T18:32:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Hi, “I’m the other Srijan, the one not from Devfolio” was the byline I’ve been forced to use for the past two months as
a certain &lt;a href=&quot;https://twitter.com/srijancse&quot;&gt;srijan&lt;/a&gt; has monopolized the byline. Yes, it was ardous but at the same time it
was incredibly fun and that line is probably a concise description of everything I was upto at the
&lt;a href=&quot;https://twitter.com/0xPolygon&quot;&gt;0xPolygon&lt;/a&gt; x &lt;a href=&quot;https://twitter.com/devfolio&quot;&gt;devfolio&lt;/a&gt; Fellowship.&lt;br /&gt;&lt;br /&gt;
I’ll be honest, it wasn’t easy being the amongst the oldest of the lot in a hackerhouse and I’d be lying if I said that
my age represented the age old wisdom of experience. The fellowship was replete with build00rs of all ages, and every
minute was spent learning about the amazing ideas that the fellows were working on - from DeFi yield farming to the
beauties of Account Abstraction, and ingeniuty of MeV searchers. The countless hours discussing the frontier of web3 and
hacking along with the best of the build00rs of ecosystem is time that I shall definitely cherish.&lt;br /&gt;&lt;br /&gt;
My idea for the fellowship was to try and solve the problem of decentralized hiring through
&lt;a href=&quot;https://bytrinity.xyz&quot;&gt;Trinity&lt;/a&gt;. Hiring is a broken process and it leaves no one happy. Potential candidates are
optimizing for Data Structures and Algorithms (DSA), while employers are unable to come up with a comprehensive solution
to test the technical skills of the candidates without any Proof Of Work (PoW). Trinity tries to solve this problem
using a novel approach of adding a layer of validators who conduct technical interviews of the candidates and provide
them with skill NFTs (now and Soul Bound Tokens) later to solve the cold-start problem of hiring. If a candidate gets
hired, the validators earn a small comission from the employer.&lt;br /&gt;&lt;br /&gt;
All the code including the smart contract is open source and the links are provided below:&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Title&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Source&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Smart Contract&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/srijanshetty/trinity&quot;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Front End&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://github.com/srijanshetty/trinity-web&quot;&gt;GitHub&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Website&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://bytrinity.xyz&quot;&gt;Link&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Mumbai Contract&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mumbai.polygonscan.com/address/0xe87e9c2e04904a42f9d15426fa65d63a1735f52b#code&quot;&gt;Contract&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/polygon-devfolio-fellowship/&quot;&gt;Polygon Devfolio Fellowship&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 12, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Poor Man's ALB - Apache]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/poor-mans-alb-apache/" />
  <id>//srijanshetty.in/technical/poor-mans-alb-apache</id>
  <published>2022-09-02T00:41:54+05:30</published>
  <updated>2022-09-02T00:41:54+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;One complicated aspect of SEO is hosting your blog on the same domain as the rest of the site. This is arguably very
simple on AWS via ALB which allows sublocation routing, but it became a nightmare when we had to move our resources
awayt from AWS once we had to shutdown our startups and keep the blog churning content.&lt;br /&gt;&lt;br /&gt;
Wordpress is a lingua franca for most content online, but the way it handles URLs internally is aggregious. My first
instinct was to host wordpress via nginx, using &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL termination&lt;/code&gt; at &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;. But wordpress decided to
act like a brashful teenager. Finally I caved and hosted wordpress with &lt;code class=&quot;highlighter-rouge&quot;&gt;apache&lt;/code&gt; on a &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; subdomain here &lt;a href=&quot;https://allround.club/blog&quot;&gt;allround
blog&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;
The second part of the problem was running &lt;code class=&quot;highlighter-rouge&quot;&gt;next.js&lt;/code&gt; on the same host on the &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; path. Apache has &lt;code class=&quot;highlighter-rouge&quot;&gt;ProxyPass&lt;/code&gt;, but my
first attempt wasn’t very succesful and after some researching (sic) on the internet, this was the final solution that
worked.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ProxyPass&lt;/span&gt; /blog !
&lt;span class=&quot;nc&quot;&gt;Alias&lt;/span&gt; /blog /path/to/wordpress

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /path/to/wordpress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Limit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FileInfo&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;DirectoryIndex&lt;/span&gt; index.php
    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
    &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /path/to/wordpress/wp-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
    &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ProxyPass&lt;/span&gt; 		/ http://localhost:3001/
&lt;span class=&quot;nc&quot;&gt;ProxyPassReverse&lt;/span&gt; 	/ http://localhost:3001/
&lt;span class=&quot;nc&quot;&gt;ProxyPreserveHost&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;LogLevel&lt;/span&gt; warn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The trick was &lt;code class=&quot;highlighter-rouge&quot;&gt;ProxyPass /blog !&lt;/code&gt; which ensured that we can use apache for sublocation routing. On port 3001, &lt;code class=&quot;highlighter-rouge&quot;&gt;next.js&lt;/code&gt;
was running &lt;code class=&quot;highlighter-rouge&quot;&gt;supervisor&lt;/code&gt; (my goto solution for running apps on a box).&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/poor-mans-alb-apache/&quot;&gt;Poor Man's ALB - Apache&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on September 02, 2022.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[How Do Gulp Typescript Without Module Loaders]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/how-do-gulp-typescript-without-module-loaders/" />
  <id>//srijanshetty.in/technical/how-do-gulp-typescript-without-module-loaders</id>
  <published>2020-10-20T18:10:00+05:30</published>
  <updated>2020-10-20T18:10:00+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Call me old school but I still use gulp, because it’s easy to comprehend over the monster webpack is. I can write
a &lt;code class=&quot;highlighter-rouge&quot;&gt;gulpfile.js&lt;/code&gt; from scratch and modify it using streams but I wouldn’t remember how to start a webpack project
without &lt;code class=&quot;highlighter-rouge&quot;&gt;create-app-starter&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;
Also, I lied, you can’t do this without module loaders, but you can &lt;strong&gt;almost&lt;/strong&gt; do it without them. Confused? So was I,
the idea is to use the module loader to do the minimum amount of work and not disrupt your workflow by a lot!&lt;br /&gt;&lt;br /&gt;
My current predicament has been my own doing, and this is probably the universe sending me a signal&lt;br /&gt;&lt;br /&gt;
My project consisted of a single &lt;code class=&quot;highlighter-rouge&quot;&gt;js/booking.js&lt;/code&gt; file which I wanted to port over to &lt;em&gt;typescript&lt;/em&gt; which I love.
I was foolish to think that this would take me an hour or two, I was not ready for the Pandora’s box that I was about to
open.&lt;br /&gt;&lt;br /&gt;
Prima Facie, my assumption was that &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i -D typescript gulp-typescript&lt;/code&gt; and a simple recipe to transform should do the
job. It wasn’t that simple and boiled down to multiple reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You cannot use &lt;em&gt;typescript&lt;/em&gt; &lt;strong&gt;without&lt;/strong&gt; a module loader. Battered and bruised, I finally resorted to using &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemJS&lt;/code&gt;
because &lt;code class=&quot;highlighter-rouge&quot;&gt;amd&lt;/code&gt; does not support &lt;code class=&quot;highlighter-rouge&quot;&gt;top-level await&lt;/code&gt;. You have to add &lt;strong&gt;module: “system”&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig&lt;/code&gt; for this to
work.&lt;/li&gt;
  &lt;li&gt;You need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;outFile&lt;/code&gt; option in &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.json&lt;/code&gt; for it to generate a standalone file.&lt;/li&gt;
  &lt;li&gt;Only &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemJS&lt;/code&gt; does not cut it and you need to import &lt;code class=&quot;highlighter-rouge&quot;&gt;/extras/named-register.min.js&lt;/code&gt; because &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-typescript&lt;/code&gt;
creates a named module.&lt;/li&gt;
  &lt;li&gt;You have to import the created module in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;System.import('booking.js')&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Do not use &lt;code class=&quot;highlighter-rouge&quot;&gt;import Vue from 'vue'&lt;/code&gt; syntax, instead use &lt;code class=&quot;highlighter-rouge&quot;&gt;import type Vue from 'vue'&lt;/code&gt;. This will save you a whole lot
of pain in trying to resolve dependencies in your files. After this, you can use a bare script tag to import Vue as a
global in the browser.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m listing down the main components of all the files for your reference.&lt;/p&gt;

&lt;h3 id=&quot;gulpfilejs&quot;&gt;gulpfile.js&lt;/h3&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gulp-typescript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tsconfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./tsconfig.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ts/booking.ts&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eslint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;failAfterError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tsconfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compilerOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;outFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;booking.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./dist/js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browsersync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tsconfigjson&quot;&gt;tsconfig.json&lt;/h3&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;moduleResolution&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;removeComments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;esModuleInterop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;allowSyntheticDefaultImports&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;experimentalDecorators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;noUnusedLocals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;noUnusedParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;noImplicitReturns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;noFallthroughCasesInSwitch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;forceConsistentCasingInFileNames&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;typeRoots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ts/declaration.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules/@types&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;indexhtml&quot;&gt;index.html&lt;/h3&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path-to-vue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path-to-systemjs&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path-to-systemjs-named-register&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;path-to-generated-booking.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;booking&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hope this helps saves a few hours of desperate &lt;em&gt;wuts&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/how-do-gulp-typescript-without-module-loaders/&quot;&gt;How Do Gulp Typescript Without Module Loaders&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on October 20, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Leaving Your Sock(et)s Hanging]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/leaving-your-sock-et-s-hanging/" />
  <id>//srijanshetty.in/technical/leaving-your-sock-et-s-hanging</id>
  <published>2020-07-21T13:12:24+05:30</published>
  <updated>2020-07-21T13:12:24+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;A command pattern that I’ve used in multiple projects is an event-loop sidecar. The sidecar runs on it’s own thread and
does asynchronous IO; thereby increasing the responsiveness of the system which could be doing IO/CPU bound work. The
application (running on the main thread) interfaces with the sidecar through a synchronous API.&lt;br /&gt;&lt;br /&gt;
There are multiple caveats to this pattern. With python’s GIL, the sidecar should strictly be doing I/O to ensure that
the pattern has the desired effects. If you have a CPU bound sidecar, you’ll end up with an architecture which performs
worse than a single threaded job.&lt;br /&gt;&lt;br /&gt;
Setting up such a sidecar takes some time to get used to, but is easier in python 3.7+:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_create_sidecar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_create_sidecar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseEventLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Initialize the eventloop and setup a listener
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# We use an event loop initialized in the main thread and use it
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# over here. This allows us to submit requests on a synchronous
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# fashion using create_task on the main thread and processing
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# happens in the sidecar
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_event_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Register a task for socket manager setup
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run_until_complete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CancelledError&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Loop got shutdown, due to %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    Setup the connection and process messages
    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;websockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_has_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebSocketError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# self._closing is called by exit which is described later
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_closing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# Process messages here:
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# _has_error is ane Event to indicate that the socket has an error
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_has_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error %s in WS, will raise WebSocketError&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Close the connection and signal that we are done
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws_has_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code takes getting used to. Hopefully the comments help in exposition. To be honest, in an earlier version,
we just let the application crash on socket errors without cleaning up. This led to gnarly memory issues, especially if
you have a long running job which reintializes this pattern.  This &lt;code class=&quot;highlighter-rouge&quot;&gt;exit protocol&lt;/code&gt; to close the resource properly took
multiple iterations, but now has been perfected:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    exit is called on the main thread and not on the sidecar
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Indicates the listener to stop processing any new messages
&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_closing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Busy loop and waits for the socket to close
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# NOTE: assumption is that listener gets triggered frequently
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_ws_has_closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# If more than one minute is taken, just break the connection
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# NOTE: only minute is the max latency the application can tolerate,
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# before it gets repead by the scheduler in our case.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;Busy looping to close websocket, time elapsed %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ONE_MINUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Existing web socket without clearing connection&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Busy loop
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEN_SECONDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Stop the loop now
&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Clean up all pending tasks
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Join with the sidecar
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THREAD_JOIN_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sidecar_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isAlive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unable to clear up sidecar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every article on &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncio&lt;/code&gt; will advice you to close the thread and clean up pending tasks. But not article will tell you
that closing the thread will almost never work and end up with hard to debug errors. It took me a lot of head wrangling
to figure out the right protocol to correctly close a sidecar thread which uses an event loop:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stop processing new messages on the sidecar.&lt;/li&gt;
  &lt;li&gt;Close the websocket connection, you will have to busy loop in order to do so.&lt;/li&gt;
  &lt;li&gt;Close the loop and clear pending tasks.&lt;/li&gt;
  &lt;li&gt;Join with the sidecar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Missing any one of these steps is a path to an endless pit of &lt;em&gt;wats&lt;/em&gt;. Especially the first two steps, which are taken
granted in languages which support such idioms out of the box like Java.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/leaving-your-sock-et-s-hanging/&quot;&gt;Leaving Your Sock(et)s Hanging&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on July 21, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Custom DNS Using Pihole]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/custom-dns-using-pihole/" />
  <id>//srijanshetty.in/technical/custom-dns-using-pihole</id>
  <published>2020-07-18T14:23:15+05:30</published>
  <updated>2020-07-18T14:23:15+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I finally managed to setup custom DNS routes at my home server (a repurposed laptop with a bust screen, a post for
another day).&lt;br /&gt;&lt;br /&gt;
I installed &lt;a href=&quot;https://pi-hole.net&quot;&gt;pihole&lt;/a&gt; on my local server and was struggling with setting up custom
routes for my local router, and some AWS and GCP boxes that I run. My first attempt was modifying
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pihole/local.list&lt;/code&gt; with the following values:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.0.0.1 test.lan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration worked, until pihole updated gravity database and &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pihole/local.list&lt;/code&gt; was cleaned up.&lt;br /&gt;&lt;br /&gt;
After searching the rabbit hole of the internet, I was stuck with the epiphany of modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;dnsmasq&lt;/code&gt; to add the
entries. The following configuration did the trick:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;address=/test.lan/0.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My only pet-peeve is the default behaviour of browsers like firefox and chrome to interpret &lt;code class=&quot;highlighter-rouge&quot;&gt;.lan&lt;/code&gt; entries as search
queries instead of domain names.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/custom-dns-using-pihole/&quot;&gt;Custom DNS Using Pihole&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on July 18, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Shell tricks to manage a cluster]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/shell-tricks-to-manage-a-cluster/" />
  <id>//srijanshetty.in/technical/shell-tricks-to-manage-a-cluster</id>
  <published>2020-07-04T18:48:51+05:30</published>
  <updated>2020-07-04T18:48:51+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;There are complex solutions available for server management, some of you might even be on the &lt;em&gt;containerization train&lt;/em&gt;.
Sometimes you just want to run a quick command on every server, it could be a one off to check &lt;code class=&quot;highlighter-rouge&quot;&gt;uptime&lt;/code&gt; or a simple
check for &lt;code class=&quot;highlighter-rouge&quot;&gt;lockfiles&lt;/code&gt;. Here’s a simple script which runs a shell command on a list of servers.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;1&lt;/span&gt;:?&lt;span class=&quot;s2&quot;&gt;&quot;Must supply action&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;:?&lt;span class=&quot;s2&quot;&gt;&quot;Must supply host name&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./scripts/lib.sh

&lt;span class=&quot;c&quot;&gt;# Expand host string&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;GET_HOSTS &lt;span class=&quot;nv&quot;&gt;$HOST&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# GET_HOSTS is a lists all hosts&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Command to SSH&lt;/span&gt;
SSH_COMMAND&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;GET_IP &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# GET_IP is maps hostname to IP&lt;/span&gt;
    ssh &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TARGET_USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Run command for each host&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; results
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;H &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Redirect output to a temp file, later redirect back to stdio&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;amp;&amp;gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Not the '&amp;amp;', this creates a background process.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# We also source the env on the host,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# as .bashrc and .bash_profile are finicky at times&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Running command %s %s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    SSH_COMMAND &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$H&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;source ~/app/scripts/env.sh; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp; 

    &lt;span class=&quot;c&quot;&gt;# '$!' is the PID which maps to the correct temp file&lt;/span&gt;
    results[&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$temp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Restore stdout and stderr&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;amp;&amp;gt; /dev/tty

&lt;span class=&quot;c&quot;&gt;# Wait for the jobs that were executed&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;pid &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!results[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a lot to dissect in this little snippet. Let’s get right to it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -u&lt;/code&gt;:  Most bash guides will ask you to use &lt;code class=&quot;highlighter-rouge&quot;&gt;set -eEuo pipefail&lt;/code&gt;, but you would not want to use that especially
when you parallelize using background proccesses in bash. This would mean partial execution and we want to avoid that
all costs. The only error that we care about is &lt;em&gt;undefined variables&lt;/em&gt;, hence the &lt;em&gt;set -u&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET HOSTS&lt;/code&gt;: A simple function to generate a list of hosts that you want to run the command on.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec &amp;amp;&amp;gt; ${temp} and exec &amp;amp;&amp;gt; /dev/tty&lt;/code&gt;: This redirects the output temporarily and later resets it to the terminal.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;results[$!]=$temp&lt;/code&gt;: To keep track of which pid points to which output file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for pid in &quot;${!results[@]}&quot;&lt;/code&gt;: Traverse over every pid in the map and wait on it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This simple scripts saves a lot of time especially when you’re managing a cluster of servers.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/shell-tricks-to-manage-a-cluster/&quot;&gt;Shell tricks to manage a cluster&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on July 04, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[KISS - UNIX and Composition]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/kiss-unix-and-composition/" />
  <id>//srijanshetty.in/technical/kiss-unix-and-composition</id>
  <published>2020-04-14T14:51:36+05:30</published>
  <updated>2020-04-14T14:51:36+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As engineers, we go overboard with engineering. Consider a recent &lt;strong&gt;bete noire&lt;/strong&gt; was the lack of a good API to get NAV
for mutual funds in India. &lt;a href=&quot;https://www.amfiindia.com/&quot;&gt;AMFI&lt;/a&gt;, the association for mutual funds in India maintains a
text file containing all the NAVs at open &lt;a href=&quot;https://www.amfiindia.com/spages/NAVAll.txt&quot;&gt;here&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;
The first attempt I did to query the API was to write a python behemoth to which did a simple search after converting
the data into json, and is hosted &lt;a href=&quot;https://github.com/srijanshetty/amfitools&quot;&gt;here&lt;/a&gt;.  Pleased with my prowess of python,
I decided to implement fuzzy-search as well. After spending a few minutes pondering the correct interface of the
commandline, I thought I should give bash a chance to solve the issue. &lt;a href=&quot;https://github.com/junegunn/fzf&quot;&gt;fzf&lt;/a&gt;, is
already all over my zsh-fu and it seemed well versed to handle this task. All I needed was to massage the data returned
into something easily fed into &lt;strong&gt;fzf&lt;/strong&gt;, after 10 minutes, I had the following:&lt;/p&gt;

&lt;div class=&quot;language-zsh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get-nav &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        http https://www.amfiindia.com/spages/NAVAll.txt | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f4&lt;/span&gt;,5 | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;';'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\t'&lt;/span&gt; | fzf
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This zsh snippet makes use of &lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt; to download the file, &lt;strong&gt;cut and tr&lt;/strong&gt; to conver the output to
a format feedable to &lt;strong&gt;fzf&lt;/strong&gt; and now I have generic fuzzy completion in a zsh one liner. Here’s a demo of the same:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/images/nav.gif&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;The UNIX rule of composition and KISS have stood the test of time. It’s easy to get overboard and reinvent the wheel
when you could create complex text munging in one liners of shell.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/kiss-unix-and-composition/&quot;&gt;KISS - UNIX and Composition&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on April 14, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Storing Cookies With Httpie]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/storing-cookies-with-httpie/" />
  <id>//srijanshetty.in/storing-cookies-with-httpie</id>
  <published>2020-01-14T12:34:57+05:30</published>
  <updated>2020-01-14T12:34:57+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m trying a new series of posts with gist kind of content.&lt;br /&gt;&lt;br /&gt;
I’m a huge fan of &lt;a href=&quot;https://httpie.org/&quot;&gt;httpie&lt;/a&gt;, it has a natural syntax and covers more than 90% of the use-cases
required during the development of a REST service. Session support out of the box was a huge surprise, but at the same
time, it was a let-down as it did not relay back cookies in HTTP headers.&lt;br /&gt;&lt;br /&gt;
After copy pasting &lt;em&gt;Set-Cookie&lt;/em&gt; header in a session.json every time I pulled down docker image, the coder in me wanted
to automate the mundane. The following is the output of a few hours wasted, feel free to add it to your own shellrc.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Use session file if present for http&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;http&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;http &amp;amp;&amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;http &lt;span class=&quot;nt&quot;&gt;--session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./.session.json &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;command is not installed&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This function extracts cookie information from the headers of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# an httpie request and then stores it in a .session-file&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;set-cookie&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    setopt clobber

    &lt;span class=&quot;c&quot;&gt;# Extract bookie after login&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;COOKIE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;http &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;h | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Cookie'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c2-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The cookie is: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$COOKIE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Create a session file using HERE DOC&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .session.json &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
{
    &quot;headers&quot;: {
        &quot;Cookie&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;
    }
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Remove line endings&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/\r//g'&lt;/span&gt; .session.json
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are two pieces to the httpie sessions puzzle. The command &lt;strong&gt;set-cookie&lt;/strong&gt; extracts the &lt;em&gt;Set-Cookie&lt;/em&gt; header from the
request, stripes it of whitespaces and stores it down to a new &lt;em&gt;session.json&lt;/em&gt; file. The &lt;em&gt;clobber&lt;/em&gt; option will rewrite an
existing &lt;em&gt;.session.json&lt;/em&gt; file if present. I’ve also created a new &lt;strong&gt;http&lt;/strong&gt; function which uses a session file
always.&lt;br /&gt;&lt;br /&gt;
My workflow now is to call set-cokkie to the authentication end-point which sets the session file. Followed by calls to
end-points which require authentication.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/storing-cookies-with-httpie/&quot;&gt;Storing Cookies With Httpie&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on January 14, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Gitting Hooks setups]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/gitting-hooks-setup/" />
  <id>//srijanshetty.in/gitting-hooks-setup</id>
  <published>2019-10-06T23:31:27+05:30</published>
  <updated>2019-10-06T23:31:27+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I’ve always loved the concept of &lt;code class=&quot;highlighter-rouge&quot;&gt;git hooks&lt;/code&gt;, but it’s setup has always troubled me as being &lt;code class=&quot;highlighter-rouge&quot;&gt;snowflaky&lt;/code&gt;.
Sharing hooks across a development team was awkward and there was no &lt;a href=&quot;https://www.martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;Ubiquitous
Language&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;
After struggling with bespoke solutions in the lingua franca of bash,
I rolled my own solutions which has been lost (fortunately) to Father Time.
My Eureka moment happened last week when I came across &lt;a href=&quot;https://commitlint.js.org/#/guides-local-setup&quot;&gt;commitlint&lt;/a&gt;
and the &lt;a href=&quot;https://www.conventionalcommits.org/en/v1.0.0/&quot;&gt;Conventional Commits&lt;/a&gt; spec 
(an admirable way to manage releases and make commits more readable).
In trying to integrate Conventional Commits to my &lt;a href=&quot;https://github.com/srijanshetty/minimal-mistakes&quot;&gt;website&lt;/a&gt;, 
I’ve come across a solution that works perfect for me.&lt;br /&gt;&lt;br /&gt;
The current setup uses &lt;code class=&quot;highlighter-rouge&quot;&gt;husky&lt;/code&gt; as a dev-dependency in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; which sets up a &lt;code class=&quot;highlighter-rouge&quot;&gt;commit-msg&lt;/code&gt; hook as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; husky&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;other parameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commitlint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@commitlint/config-conventional&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type-enum&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;feat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;refactor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;revert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;post&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;husky&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;hooks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;commit-msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commitlint -E HUSKY_GIT_PARAMS&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The great part of this setup is that it ties everything into a single &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file. 
The npm eco-system is a cesspool when it comes to security but it does make developer tooling a breeze.
The community converging on using a single &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; is a god-send, over the alternative of a bunch of .rc files spewed all across; adding &lt;code class=&quot;highlighter-rouge&quot;&gt;git hooks&lt;/code&gt; is the natural evolution to the puzzle.&lt;br /&gt;&lt;br /&gt;
It’s great how sometimes your problems solve themselves if you let them be for years.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/gitting-hooks-setup/&quot;&gt;Gitting Hooks setups&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on October 06, 2019.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[JCIP - Java Concurrency in Practice 2019 Review]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review/" />
  <id>//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review</id>
  <published>2019-08-18T17:50:38+05:30</published>
  <updated>2019-08-18T17:50:38+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;As of writing, &lt;code class=&quot;highlighter-rouge&quot;&gt;Java 13&lt;/code&gt; has a release candidate and JCIP still refers to &lt;code class=&quot;highlighter-rouge&quot;&gt;Java 6&lt;/code&gt; as the latest and greatest of Java. It’s no wonder that Java forums are replete with questions on the relevance of JCIP - full disclosure, I posed the same question when I emailed Heinz Kabutz. After spending 6 months with the books (you read that right, and this wasn’t the only book I was reading), I’ve realized how wrong my Java programs have been. &lt;br /&gt;&lt;br /&gt;
In the age of fast paced evolution of programming languages, most programming language books age badly. JCIP is not in that ilk, the fundamental point of contention in JCIP is writing highly scalable and correct concurrent code and not Java. JCIP excels in imparting a fundamental understanding of concurrency, and dissecting core issues a developer might face when architecting concurrent programs.&lt;br /&gt;&lt;br /&gt;
Caveat emptor. It’s a dense read, ideas are succinct and compact and rarely prolix. Which makes it easy to read and hard to grasp. There have been times wherein I’ve spent hours understanding the implication of concepts such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Initialization safety&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;safe publication&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;happens-before relationships&lt;/code&gt;; these concepts have inexorably changed my mental model of concurrent programming for the better.&lt;br /&gt;&lt;br /&gt;
I would definitely urge serious Java programmers to try and work through JCIP, and maybe have an epiphany of their own.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/jcip-java-concurrency-in-practice-2019-review/&quot;&gt;JCIP - Java Concurrency in Practice 2019 Review&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 18, 2019.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[John Vim - Parabellum]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/technical/john-vim-parabellum/" />
  <id>//srijanshetty.in/technical/john-vim-parabellum</id>
  <published>2019-06-28T09:21:32+05:30</published>
  <updated>2019-06-28T09:21:32+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;I would be digressing but the parallels between John Wick and Vim are too many.
Both of them are fine craftsmen of their meteir, surgical and deliberate at every
step, at their prime all their actions are well thought of and are operatic. It’s
not what they do, but how they accomplish their raison d’etre that makes them what
they are today.&lt;br /&gt;&lt;br /&gt;
Vim8 was a big bang release unleashing a wealth of goodies to all us vim enthusiasts.
But trying the latest vim out was challenging, because I was circumscribe by my choice
of linux distribution. A PPA is definitely a way out of my quagmire, but I prefer not to
use a random PPA for the lack of trust. Vim8 was a dream that I forgot about until my
laptop crashed and I bought an OTC Ubuntu 18.04 laptop.&lt;br /&gt;&lt;br /&gt;
8.1 is a minor release but I couldn’t wait another laptop cycle to get my hands on. So,
I decided to chose the &lt;a href=&quot;https://en.wikipedia.org/wiki/Red_pill_and_blue_pill&quot;&gt;red pill&lt;/a&gt;
and compile vim from source.&lt;br /&gt;&lt;br /&gt;
Theoretically compiling vim from source should be simple:&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/vim &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vim
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But the devil is in the details. Here’s the exact steps that one needs to follow:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/vim &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;vim
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;huge &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-multibyte&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-rubyinterp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-python3interp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-python3-config-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/python3.6/config-3.6m-x86_64-linux-gnu/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-perlinterp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-luainterp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-gui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gtk &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-cscope&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local_bin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Some salient points in this setup are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I tried using pyenv’s path for python3-config-dir, it does not work.&lt;/li&gt;
  &lt;li&gt;Python 2 and 3 cannot interop in ubuntu as explained
&lt;a href=&quot;https://stackoverflow.com/questions/23023783/vim-compiled-with-python-support-but-cant-see-sys-version&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully, this helps a forlorn developer searching for the oasis.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/technical/john-vim-parabellum/&quot;&gt;John Vim - Parabellum&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on June 28, 2019.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Modern Love]]></title>
  <link rel="alternate" type="text/html" href="//srijanshetty.in/prose/modern-love/" />
  <id>//srijanshetty.in/prose/modern-love</id>
  <published>2018-08-26T17:50:51+05:30</published>
  <updated>2018-08-26T17:50:51+05:30</updated>
  <author>
    <name>Srijan R. Shetty</name>
    <uri>//srijanshetty.in</uri>
    <email>srijan.shetty+code@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;The problem has always been that we’re presented with such a romanticized version of love stories. The brooding byronic hero’s love is an inescapable force and the damsel/strong women gravitates towards it. It’s a singular love, it’s either make it or break it, their communion was destined and they’re unbreakable; but is it true? Does modern love really resemble what’s been foretold for centuries, and if we’re being honest here, I would like to ask if any love is of this kind?&lt;br /&gt;&lt;br /&gt;
On the other hand we have the archetypal bad boy, who wins over woman with his enigma or emotional unavailability; another stereotype which manifests in possessive other halves who don’t let the other breathe. Love was never meant to be suffocating - well, not always - it’s interesting that we stand at destiny’s crossroads today, trying to decipher what love is, and more importantly what it should be, for after all it’s the gestalt of the cultural zeitgeist.&lt;br /&gt;&lt;br /&gt;
I would define love as a little more than friendship, it has the emotional availability of friendship; the zing that it brings along. It’s a little more than friendship considering there’s that physical connect which might or might not be in a friendship. Love and friendship are very much alike, to the extend that I would make the apposite claim that I love all my best friends. (This might invoke the collective groan of a lot of readers who either haven’t loved or who fail to see love to be anything beyond the physical realm).&lt;br /&gt;&lt;br /&gt;
Love is a synergistic bond, you let each other grow, you let each other fail, you scuffle, you make up, you stay put for each other - like friends do. In fact, friendship is not an exclusive relationship, you can be really close with a few different people; modern times juxtapose love to friendship by invoking the exclusivity clause - which is not fine by me, for it abases love to be merely physical. Love is more than that, love demands no sacrifice, you need not give up your friendships to taste the forbidden fruit.&lt;br /&gt;&lt;br /&gt;
Modern love is strange, and hopefully we come to see of it more like friendship; and less contractual&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//srijanshetty.in/prose/modern-love/&quot;&gt;Modern Love&lt;/a&gt; was originally published by Srijan R. Shetty at &lt;a href=&quot;//srijanshetty.in&quot;&gt;Srijan R. Shetty&lt;/a&gt; on August 26, 2018.&lt;/p&gt;
  </content>
</entry>

</feed>
